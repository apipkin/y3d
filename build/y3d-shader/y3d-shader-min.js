YUI.add("y3d-shader",function(e,t){var n=null,r=null,i=["precision mediump float;","varying vec4 fragmentColor;","varying vec3 lightWeight;","#ifdef USE_TEXTURE","varying vec2 vertexTextureCoordinates;","uniform sampler2D sampler;","#endif","void main(void) {","gl_FragColor = fragmentColor;","#ifdef USE_TEXTURE","gl_FragColor = gl_FragColor * texture2D(sampler, vertexTextureCoordinates);","#endif","#ifdef USE_LIGHT","gl_FragColor = vec4(gl_FragColor.rgb * lightWeight, gl_FragColor.a);","#endif","}"].join("\n"),s=["attribute vec3 vertexPosition;","attribute vec4 vertexColor;","attribute vec3 vertexNormal;","#ifdef USE_TEXTURE","attribute vec2 textureCoordinates;","varying vec2 vertexTextureCoordinates;","#endif","uniform mat4 projectionMatrix;","uniform mat4 modelViewMatrix;","uniform mat3 normalMatrix;","#ifdef USE_LIGHT","uniform vec3 lightColor;","uniform vec3 lightDirection;","#endif","varying vec4 fragmentColor;","varying vec3 lightWeight;","void main(void) {","gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPosition, 1.0);","fragmentColor = vertexColor;","#ifdef USE_TEXTURE","vertexTextureCoordinates = textureCoordinates;","#endif","#ifdef USE_LIGHT","vec3 ambientLightColor = vec3(1.0, 1.0, 1.0);","vec3 transformedNormal = normalMatrix * vertexNormal;","float directionalLightWeight = max(dot(transformedNormal, lightDirection), 0.0);","lightWeight = ambientLightColor + lightColor * directionalLightWeight;","#else","lightWeight = vec3(1.0, 1.0, 1.0);","vertexNormal;","#endif","}"].join("\n");e.Shader={compile:function(e,t,n){var r,o;return t==="fragment"?(r=e.createShader(e.FRAGMENT_SHADER),o=i):t==="vertex"&&(r=e.createShader(e.VERTEX_SHADER),o=s),n=n.join("\n"),o=[n,o].join("\n"),e.shaderSource(r,o),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS)?r:(console.log(e.getShaderInfoLog(r)),null)},getColorProgram:function(t){if(n!==null)return n;var r=t.context,i=t.constants||[];return n=e.Shader.link(r,i),n},getTextureProgram:function(t){if(r!==null)return r;var n=t.context,i=t.constants||[];return i.push("#define USE_TEXTURE"),r=e.Shader.link(n,i),r.textureCoordinatesAttribute=n.getAttribLocation(r,"textureCoordinates"),n.enableVertexAttribArray(r.textureCoordinatesAttribute),r.samplerUniform=n.getUniformLocation(r,"sampler"),r},link:function(t,n){var r=e.Shader.compile(t,"fragment",n),i=e.Shader.compile(t,"vertex",n),s=t.createProgram();return t.attachShader(s,r),t.attachShader(s,i),t.linkProgram(s),t.getProgramParameter(s,t.LINK_STATUS)||console.log("Could not link shaders"),s.vertexPositionAttribute=t.getAttribLocation(s,"vertexPosition"),t.enableVertexAttribArray(s.vertexPositionAttribute),s.vertexColorAttribute=t.getAttribLocation(s,"vertexColor"),t.enableVertexAttribArray(s.vertexColorAttribute),s.vertexNormalAttribute=t.getAttribLocation(s,"vertexNormal"),t.enableVertexAttribArray(s.vertexNormalAttribute),s.projectionMatrixUniform=t.getUniformLocation(s,"projectionMatrix"),s.modelViewMatrixUniform=t.getUniformLocation(s,"modelViewMatrix"),s.normalMatrixUniform=t.getUniformLocation(s,"normalMatrix"),s.lightColorUniform=t.getUniformLocation(s,"lightColor"),s.lightDirectionUniform=t.getUniformLocation(s,"lightDirection"),s}}},"0.1");
